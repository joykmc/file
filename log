root@sonic:/home/admin# bash read.sh 
lrwxrwxrwx 1 root root 35 Oct 24 15:55 /sys_switch/transceiver/eth1/eeprom -> /sys/bus/i2c/devices/23-0050/eeprom
lrwxrwxrwx 1 root root 39 Oct 24 15:55 /sys_switch/transceiver/eth1/tx_disable -> /sys/bus/i2c/devices/23-0050/tx_disable
lrwxrwxrwx 1 root root 35 Oct 24 15:55 /sys_switch/transceiver/eth1/rx_los -> /sys/bus/i2c/devices/23-0050/rx_los
lrwxrwxrwx 1 root root 37 Oct 24 15:55 /sys_switch/transceiver/eth1/tx_fault -> /sys/bus/i2c/devices/23-0050/tx_fault



root@sonic:/home/admin# cat read.sh 
#!/bin/bash

for i in {1..128};
do
	ls /sys_switch/transceiver/eth$i/eeprom -l
	ls /sys_switch/transceiver/eth$i/tx_disable -l
	ls /sys_switch/transceiver/eth$i/rx_los -l
	ls /sys_switch/transceiver/eth$i/tx_fault -l
	echo "====================================="
done
root@sonic:/home/admin# 


import time
import signal
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class SysfsEventHandler(FileSystemEventHandler):
    def __init__(self, watch_file):
        super().__init__()
        self.watch_file = watch_file

    def on_created(self, event):
        if event.src_path == self.watch_file:
            print(f"File {self.watch_file} has been created.")
            self.handle_create_event()

    def on_deleted(self, event):
        if event.src_path == self.watch_file:
            print(f"File {self.watch_file} has been deleted.")
            self.handle_delete_event()

    def handle_create_event(self):
        print("Executing create event action")

    def handle_delete_event(self):
        print("Executing delete event action")

def start_monitoring(sysfs_path):
    event_handler = SysfsEventHandler(sysfs_path)
    observer = Observer()

    # 设置监控路径为 sysfs 文件所在目录
    observer.schedule(event_handler, path=sysfs_path.rsplit("/", 1)[0], recursive=False)
    observer.start()
    print(f"Started monitoring {sysfs_path}")

    # 定义退出处理函数
    def graceful_exit(signum, frame):
        print("Gracefully stopping observer...")
        observer.stop()

    # 捕捉 SIGINT (Ctrl+C) 和 SIGTERM 信号
    signal.signal(signal.SIGINT, graceful_exit)
    signal.signal(signal.SIGTERM, graceful_exit)

    try:
        observer.join()  # 等待 observer 线程结束
    finally:
        print("Stopped monitoring.")

if __name__ == "__main__":
    sysfs_path = "/sys/switch/transceiver/eth1/tx_disable"  # 监控的 sysfs 文件路径
    start_monitoring(sysfs_path)

